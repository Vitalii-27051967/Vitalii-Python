# 1) У вас есть список my_list с значениями типа int.
# Распечатать те значения, которые больше 100.
# Задание выполнить с помощью цикла for.
###############################################################


my_list = [20, 40, 60, 80, 100, 120, 140, 160]
print("Задание 1", " "*5, my_list, type(my_list), end="\n\n")
for my_item in my_list:
    if my_item > 100:
        print(my_item)
print(end="\n")  # Для удобства чтения результата

# 2) У вас есть список my_list с значениями типа int, и пустой список my_results.
# Добавить в my_results те значения, которые больше 100.
# Распечатать список my_results.
# Задание выполнить с помощью цикла for.
###############################################################

my_list = [20, 40, 60, 80, 100, 120, 140, 160]
print("Задание 2", " "*5,  my_list, type(my_list), end="\n\n")
my_results = []
for my_item in my_list:
    if my_item > 100:
        my_results.append(my_item)

print(my_results, end="\n\n")

# 3) У вас есть список my_list с значениями типа int.
# Если в my_list количество элементов меньше 2, то в конец добавить значение 0.
# Если количество элементов больше или равно 2, то добавить сумму последних двух элементов.
# Количество элементов в списке можно получить с помощью функции len(my_list)
###############################################################

my_list = [20, 40, 60, 80, 100, 120, 140, 160]
print("Задание 3", " "*5,  my_list, type(my_list), end="\n\n")
my_list.append(0) if len(my_list) < 2 else my_list.append(my_list[-1] + my_list[-2])
print(my_list, end="\n\n")


# 4) Пользователь вводит value - число с запятой (например 3.14) с клавиатуры.
# Вы приводите это value к типу float и выводите результат выражения value ** -1.
# Написать программу, которая вычисляет данное выражение и
# корректно обрабатывает возможные исключения.
###############################################################

print("Задание 4", end="\n\n")

try:
    my_value = float(input("Введите значение типа Float: "))
    my_value = my_value ** -1
    print(my_value)
except ZeroDivisionError:
    print("Ошибка ввода. Производится деление на 0")
except ValueError:
    print("Ведено не число. Невозможно преобразовать строку к Float", end="\n\n")
else:
    print("Вычисления закончены.", end="\n\n")

# 5) У вас есть список значений my_list и список индексов my_indexes
# (начинается с нуля и количество элементов совпадает с количеством в my_list.
# Распечатать значения из my_list через обращение по индексу. См. пример выше.
###############################################################

print("Задание 5", end="\n\n")
my_indexes = [0, 1, 2, 3, 4]
my_list = ["a", "b", "c", "d", "e"]
for index in my_indexes:
    print(my_list[index], " "*2, end="")
print(end="\n\n")  # Для удобства чтения результата


# 6) У вас есть два списка my_list_1 и my_list_2 равной длинны и
# список индексов my_indexes (начинается с нуля и количество элементов
# совпадает с количеством в my_list_1.
# Распечатать пары значений из my_list_1 и my_list_2 через обращение по индексу.
# Например для списков [1, 3] и [2, 4]:
# (1, 2)
# (3, 4)
###############################################################

print("Задание 6", end="\n\n")
my_indexes = [0, 1, 2, 3, 4]
my_list_1 = ["a", "b", "c", "d", "e"]
my_list_2 = [1, 2, 3, 4, 5]
for index in my_indexes:
    print("(", my_list_1[index], ",",  my_list_2[index], ")")
print(end="\n")  # Для удобства чтения результата

# 7) У вас есть строка my_string = '0123456789'.
# Сгенерировать целые числа (тип int) от 0 до 99 и поместить их в список.
# Задание нужно выполнить ТОЛЬКО через цикл в цикле(См. пример выше) и приведение типов.
###############################################################

print("Задание 7", end="\n\n")
my_string = "0123456789"
my_list_3 = []
for symbol_1 in my_string:
    for symbol_2 in my_string:
        my_list_3.append(int(symbol_1 + symbol_2))
print(my_list_3)

print("Конец домашнего задания")
